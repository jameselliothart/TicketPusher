// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketPusher.API.Data;

namespace TicketPusher.API.Migrations
{
    [DbContext(typeof(TicketPusherContext))]
    [Migration("20200620140157_AddParentProject")]
    partial class AddParentProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketPusher.Domain.CompletedTickets.CompletedTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("completed_ticket_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectFK")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFK");

                    b.ToTable("completed_ticket");
                });

            modelBuilder.Entity("TicketPusher.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectFK")
                        .HasColumnName("parent_project_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFK");

                    b.ToTable("project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = ""
                        });
                });

            modelBuilder.Entity("TicketPusher.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ticket_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectFK")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFK");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("TicketPusher.Domain.CompletedTickets.CompletedTicket", b =>
                {
                    b.HasOne("TicketPusher.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TicketPusher.Domain.CompletedTickets.CompletedDetails", "CompletedDetails", b1 =>
                        {
                            b1.Property<Guid>("CompletedTicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CompletionDate")
                                .HasColumnName("completion_date")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Resolution")
                                .IsRequired()
                                .HasColumnName("resolution")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompletedTicketId");

                            b1.ToTable("completed_ticket");

                            b1.WithOwner()
                                .HasForeignKey("CompletedTicketId");
                        });

                    b.OwnsOne("TicketPusher.Domain.Tickets.TicketDetails", "TicketDetails", b1 =>
                        {
                            b1.Property<Guid>("CompletedTicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnName("description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DueDate")
                                .HasColumnName("due_date")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("SubmitDate")
                                .HasColumnName("submit_date")
                                .HasColumnType("datetime2");

                            b1.HasKey("CompletedTicketId");

                            b1.ToTable("completed_ticket");

                            b1.WithOwner()
                                .HasForeignKey("CompletedTicketId");
                        });
                });

            modelBuilder.Entity("TicketPusher.Domain.Projects.Project", b =>
                {
                    b.HasOne("TicketPusher.Domain.Projects.Project", "ParentProject")
                        .WithMany()
                        .HasForeignKey("ProjectFK");
                });

            modelBuilder.Entity("TicketPusher.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("TicketPusher.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TicketPusher.Domain.Tickets.TicketDetails", "TicketDetails", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnName("description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DueDate")
                                .HasColumnName("due_date")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("SubmitDate")
                                .HasColumnName("submit_date")
                                .HasColumnType("datetime2");

                            b1.HasKey("TicketId");

                            b1.ToTable("ticket");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
